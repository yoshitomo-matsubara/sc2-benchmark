dependencies:
  - name: 'custom'

datasets:
  &coco_train coco2017/train: !import_call
    _name: &dataset_name 'coco2017'
    _root: &root_dir !join ['~/datasets/', *dataset_name]
    key: 'coco.dataset.coco_dataset'
    init:
      kwargs:
        img_dir_path: !join [*root_dir, '/train2017']
        ann_file_path: !join [*root_dir, '/annotations/instances_train2017.json']
        annotated_only: True
        random_horizontal_flip: 0.5
        is_segment: False
  &coco_val coco2017/val: !import_call
    key: 'coco.dataset.coco_dataset'
    init:
      kwargs:
        img_dir_path: !join [*root_dir, '/val2017']
        ann_file_path: !join [*root_dir, '/annotations/instances_val2017.json']
        annotated_only: False
        is_segment: False

models:
  teacher_model:
    key: 'fasterrcnn_resnet50_fpn'
    kwargs:
      pretrained: True
      progress: True
      num_classes: 91
  student_model:
    key: 'faster_rcnn_model'
    kwargs:
      pretrained: True
      pretrained_backbone_name: 'resnet50'
      progress: True
      num_classes: 91
      backbone_config:
        key: 'splittable_resnet'
        kwargs:
          num_classes: 1000
          pretrained: True
          bottleneck_config:
            key: 'FPBasedResNetBottleneck'
            kwargs:
              num_bottleneck_channels: 24
              num_target_channels: &bch 256
          resnet_name: 'resnet50'
          pre_transform:
          skips_avgpool: True
          skips_fc: True
        src_ckpt: './resource/ckpt/ilsvrc2012/supervised_compression/entropic_student/ilsvrc2012-splittable_resnet50-fp-beta2.56_from_resnet50.pt'
      backbone_fpn_kwargs:
        return_layer_dict:
          bottleneck_layer: '1'
          layer2: '2'
          layer3: '3'
          layer4: '4'
        in_channels_list: [*bch, 512, 1024, 2048]
        out_channels: *bch
        analysis_config:
          analyzes_after_compress: True
          analyzer_configs:
            - key: 'FileSizeAnalyzer'
              kwargs:
                unit: 'KB'
        analyzable_layer_key: 'bottleneck_layer'
      start_ckpt_file_path:
    experiment: &student_experiment !join [*dataset_name, '-faster_rcnn_splittable_resnet50-fp-beta2.56_fpn_from_faster_rcnn_resnet50_fpn']
    dst_ckpt: !join ['./resource/ckpt/coco2017/supervised_compression/entropic_student/', *student_experiment, '.pt']

train:
  log_freq: 1000
  epoch_to_update: 0
  stage1:
    num_epochs: 5
    train_data_loader:
      dataset_id: *coco_train
      sampler:
        class_or_func: !import_get
          key: 'torch.utils.data.RandomSampler'
        kwargs:
      batch_sampler:
        key: 'GroupedBatchSampler'
        kwargs:
          aspect_ratio_group_factor: 3
          batch_size: 6
      collate_fn: 'coco_collate_fn'
      kwargs:
        num_workers: 8
      cache_output:
    val_data_loader:
      dataset_id: *coco_val
      sampler:
        class_or_func: !import_get
          key: 'torch.utils.data.SequentialSampler'
        kwargs:
      collate_fn: 'coco_collate_fn'
      kwargs:
        batch_size: 1
        num_workers: 8
    teacher:
      forward_proc: 'forward_batch'
      sequential: []
      special:
        key: 'HeadRCNN'
        kwargs:
          head_rcnn:
            sequential: ['backbone.body']
      frozen_modules: []
      forward_hook:
        input: []
        output: ['seq.backbone.body.layer1', 'seq.backbone.body.layer2', 'seq.backbone.body.layer3', 'seq.backbone.body.layer4']
      wrapper: 'DataParallel'
      requires_grad: False
    student:
      forward_proc: 'forward_batch'
      adaptations:
      sequential: []
      special:
        key: 'HeadRCNN'
        kwargs:
          head_rcnn:
            sequential: ['backbone.body']
      frozen_modules: ['seq.backbone.body.bottleneck_layer.encoder', 'seq.backbone.body.bottleneck_layer.entropy_bottleneck']
      forward_hook:
        input: []
        output: ['seq.backbone.body.bottleneck_layer', 'seq.backbone.body.layer2', 'seq.backbone.body.layer3', 'seq.backbone.body.layer4']
      wrapper: 'DistributedDataParallel'
      requires_grad: True
    optimizer:
      key: 'Adam'
      kwargs:
        lr: 0.001
    scheduler:
      key: 'MultiStepLR'
      kwargs:
        milestones: [3]
        gamma: 0.1
    criterion:
      key: 'WeightedSumLoss'
      kwargs:
        sub_terms:
          layer1:
            criterion:
              key: 'MSELoss'
              kwargs:
                reduction: 'sum'
            criterion_wrapper:
              key: 'SimpleLossWrapper'
              kwargs:
                input:
                  is_from_teacher: False
                  module_path: 'seq.backbone.body.bottleneck_layer'
                  io: 'output'
                target:
                  is_from_teacher: True
                  module_path: 'seq.backbone.body.layer1'
                  io: 'output'
            weight: 1.0
          layer2:
            criterion:
              key: 'MSELoss'
              kwargs:
                reduction: 'sum'
            criterion_wrapper:
              key: 'SimpleLossWrapper'
              kwargs:
                input:
                  is_from_teacher: False
                  module_path: 'seq.backbone.body.layer2'
                  io: 'output'
                target:
                  is_from_teacher: True
                  module_path: 'seq.backbone.body.layer2'
                  io: 'output'
            weight: 1.0
          layer3:
            criterion:
              key: 'MSELoss'
              kwargs:
                reduction: 'sum'
            criterion_wrapper:
              key: 'SimpleLossWrapper'
              kwargs:
                input:
                  is_from_teacher: False
                  module_path: 'seq.backbone.body.layer3'
                  io: 'output'
                target:
                  is_from_teacher: True
                  module_path: 'seq.backbone.body.layer3'
                  io: 'output'
            weight: 1.0
          layer4:
            criterion:
              key: 'MSELoss'
              kwargs:
                reduction: 'sum'
            criterion_wrapper:
              key: 'SimpleLossWrapper'
              kwargs:
                input:
                  is_from_teacher: False
                  module_path: 'seq.backbone.body.layer4'
                  io: 'output'
                target:
                  is_from_teacher: True
                  module_path: 'seq.backbone.body.layer4'
                  io: 'output'
            weight: 1.0
  stage2:
    num_epochs: 5
    train_data_loader:
      dataset_id: *coco_train
      sampler:
        class_or_func: !import_get
          key: 'torch.utils.data.RandomSampler'
        kwargs:
      batch_sampler:
        key: 'GroupedBatchSampler'
        kwargs:
          aspect_ratio_group_factor: 3
          batch_size: 6
      collate_fn: 'coco_collate_fn'
      kwargs:
        num_workers: 8
      cache_output:
    teacher:
      forward_proc: 'forward_batch_target'
      special:
        key: 'EmptyModule'
        kwargs:
      sequential: []
      forward_hook:
        input: []
        output: []
      wrapper:
      requires_grad: False
    student:
      forward_proc: 'forward_batch_target'
      adaptations:
      sequential: []
      frozen_modules: ['backbone.body.bottleneck_layer.encoder', 'backbone.body.bottleneck_layer.entropy_bottleneck']
      forward_hook:
        input: []
        output: []
      wrapper: 'DistributedDataParallel'
      requires_grad: True
    optimizer:
      key: 'SGD'
      kwargs:
        lr: 0.0001
        momentum: 0.9
        weight_decay: 0.0005
    scheduler:
      key: 'MultiStepLR'
      kwargs:
        milestones: [3]
        gamma: 0.1
    criterion:
      key: 'WeightedSumLoss'
      func2extract_model_loss: 'extract_model_loss_dict'
      kwargs:
        model_term:
          weight: 1.0

test:
  test_data_loader:
    dataset_id: *coco_val
    sampler:
      class_or_func: !import_get
        key: 'torch.utils.data.SequentialSampler'
      kwargs:
    collate_fn: 'coco_collate_fn'
    kwargs:
      batch_size: 1
      num_workers: 8
