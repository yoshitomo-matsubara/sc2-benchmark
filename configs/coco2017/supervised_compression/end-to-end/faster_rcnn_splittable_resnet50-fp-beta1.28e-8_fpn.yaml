dependencies:
  - name: 'custom'

datasets:
  &coco_train coco2017/train: !import_call
    _name: &dataset_name 'coco2017'
    _root: &root_dir !join ['~/datasets/', *dataset_name]
    key: 'coco.dataset.coco_dataset'
    init:
      kwargs:
        img_dir_path: !join [*root_dir, '/train2017']
        ann_file_path: !join [*root_dir, '/annotations/instances_train2017.json']
        annotated_only: True
        random_horizontal_flip: 0.5
        is_segment: False
  &coco_val coco2017/val: !import_call
    key: 'coco.dataset.coco_dataset'
    init:
      kwargs:
        img_dir_path: !join [*root_dir, '/val2017']
        ann_file_path: !join [*root_dir, '/annotations/instances_val2017.json']
        annotated_only: False
        is_segment: False

models:
  model:
    key: 'faster_rcnn_model'
    kwargs:
      pretrained: True
      pretrained_backbone_name: 'resnet50'
      progress: True
      num_classes: 91
      backbone_config:
        key: 'splittable_resnet'
        kwargs:
          num_classes: 1000
          pretrained: True
          bottleneck_config:
            key: 'FPBasedResNetBottleneck'
            kwargs:
              num_bottleneck_channels: 24
              num_target_channels: &bch 256
          resnet_name: 'resnet50'
          pre_transform:
          skips_avgpool: True
          skips_fc: True
        src_ckpt: './resource/ckpt/ilsvrc2012/supervised_compression/end-to-end/ilsvrc2012-splittable_resnet50-fp-beta1.28e-8.pt'
      backbone_fpn_kwargs:
        return_layer_dict:
          bottleneck_layer: '1'
          layer2: '2'
          layer3: '3'
          layer4: '4'
        in_channels_list: [*bch, 512, 1024, 2048]
        out_channels: *bch
        analysis_config:
          analyzes_after_compress: True
          analyzer_configs:
            - key: 'FileSizeAnalyzer'
              kwargs:
                unit: 'KB'
        analyzable_layer_key: 'bottleneck_layer'
      start_ckpt_file_path:
    update_before_ckpt: True
    experiment: &experiment !join [*dataset_name, '-faster_rcnn_splittable_resnet50-fp-beta1.28e-8_fpn']
    dst_ckpt: !join ['./resource/ckpt/coco2017/supervised_compression/end-to-end/', *experiment, '.pt']

train:
  log_freq: 1000
  epoch_to_update: 0
  num_epochs: 10
  train_data_loader:
    dataset_id: *coco_train
    sampler:
      class_or_func: !import_get
        key: 'torch.utils.data.RandomSampler'
      kwargs:
    batch_sampler:
      key: 'GroupedBatchSampler'
      kwargs:
        aspect_ratio_group_factor: 3
        batch_size: 6
    collate_fn: 'coco_collate_fn'
    kwargs:
      num_workers: 8
    cache_output:
  val_data_loader:
    dataset_id: *coco_val
    sampler:
      class_or_func: !import_get
        key: 'torch.utils.data.SequentialSampler'
      kwargs:
    collate_fn: 'coco_collate_fn'
    kwargs:
      batch_size: 1
      num_workers: 8
  model:
    forward_proc: 'forward_batch_target'
    adaptations:
    sequential: []
    frozen_modules: ['backbone.body.bottleneck_layer.encoder', 'backbone.body.bottleneck_layer.entropy_bottleneck']
    forward_hook:
      input: []
      output: []
    wrapper: 'DistributedDataParallel'
    requires_grad: True
  optimizer:
    key: 'SGD'
    kwargs:
      lr: 0.0001
      momentum: 0.9
      weight_decay: 0.0005
  scheduler:
    key: 'MultiStepLR'
    kwargs:
      milestones: [5]
      gamma: 0.1
  criterion:
    key: 'GeneralizedCustomLoss'
    func2extract_org_loss: 'extract_org_loss_dict'
    org_term:
      weight: 1.0
    sub_terms:

test:
  test_data_loader:
    dataset_id: *coco_val
    sampler:
      class_or_func: !import_get
        key: 'torch.utils.data.SequentialSampler'
      kwargs:
    collate_fn: 'coco_collate_fn'
    kwargs:
      batch_size: 1
      num_workers: 8
