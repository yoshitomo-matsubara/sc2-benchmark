datasets:
  &imagenet_train ilsvrc2012/train: !import_call
    _name: &dataset_name 'ilsvrc2012'
    _root: &root_dir !join ['~/datasets/', *dataset_name]
    key: 'torchvision.datasets.ImageFolder'
    init:
      kwargs:
        root: !join [*root_dir, '/train']
        transform: !import_call
          key: 'torchvision.transforms.Compose'
          init:
            kwargs:
              transforms:
                - !import_call
                  key: 'torchvision.transforms.RandomResizedCrop'
                  init:
                    kwargs:
                      size: &input_size [224, 224]
                - !import_call
                  key: 'torchvision.transforms.RandomHorizontalFlip'
                  init:
                    kwargs:
                      p: 0.5
                - !import_call
                  key: 'torchvision.transforms.ToTensor'
                  init:
                - !import_call
                  key: 'torchvision.transforms.Normalize'
                  init:
                    kwargs: &normalize_kwargs
                      mean: [0.485, 0.456, 0.406]
                      std: [0.229, 0.224, 0.225]
  &imagenet_val ilsvrc2012/val: !import_call
    key: 'torchvision.datasets.ImageFolder'
    init:
      kwargs:
        root: !join [*root_dir, '/val']
        transform: !import_call
          key: 'torchvision.transforms.Compose'
          init:
            kwargs:
              transforms:
                - !import_call
                  key: 'torchvision.transforms.Resize'
                  init:
                    kwargs:
                      size: 256
                - !import_call
                  key: 'torchvision.transforms.CenterCrop'
                  init:
                    kwargs:
                      size: *input_size
                - !import_call
                  key: 'torchvision.transforms.ToTensor'
                  init:
                - !import_call
                  key: 'torchvision.transforms.Normalize'
                  init:
                    kwargs: *normalize_kwargs

models:
  model:
    key: 'EntropicClassifier'
    kwargs:
      encoder_config:
        sequential: ['conv1', 'bn1', 'relu', 'maxpool', 'layer1', 'layer2', 'layer3', 'layer4']
      compression_model_kwargs:
        entropy_bottleneck_channels: 2048
      decoder_config:
        sequential: ['avgpool']
      classifier_config:
        sequential: ['fc']
      analysis_config:
        analyzes_after_compress: True
        analyzer_configs:
          - key: 'FileSizeAnalyzer'
            kwargs:
              unit: 'KB'
    classification_model:
      key: &model_name 'resnet50'
      _weights: &model_weights_enum !import_get
        key: 'torchvision.models.resnet.ResNet50_Weights'
      kwargs:
        num_classes: 1000
        weights: !getattr [*model_weights_enum, 'IMAGENET1K_V1']
    experiment: &experiment !join [*dataset_name, '-', *model_name, '-eb_after_layer4-beta1.0e-6']
    dst_ckpt: !join ['./resource/ckpt/ilsvrc2012/fine-tuning/', *experiment, '.pt']

train:
  log_freq: 1000
  epoch_to_update: &epoch_to_update 10
  num_epochs: *epoch_to_update
  train_data_loader:
    dataset_id: *imagenet_train
    sampler:
      class_or_func: !import_get
        key: 'torch.utils.data.RandomSampler'
      kwargs:
    kwargs:
      batch_size: 256
      num_workers: 16
      pin_memory: True
      drop_last: False
    cache_output:
  val_data_loader:
    dataset_id: *imagenet_val
    sampler:
      class_or_func: !import_get
        key: 'torch.utils.data.SequentialSampler'
      kwargs:
    kwargs:
      batch_size: 32
      num_workers: 16
      pin_memory: True
      drop_last: False
  model:
    forward_hook:
      input: []
      output: ['entropy_bottleneck']
    wrapper: 'DistributedDataParallel'
    requires_grad: True
  optimizer:
    key: 'Adam'
    kwargs:
      lr: 0.001
    grad_accum_step: 2
  scheduler:
    key: 'MultiStepLR'
    kwargs:
      milestones: [5, 8]
      gamma: 0.1
  criterion:
    key: 'WeightedSumLoss'
    kwargs:
      sub_terms:
        ce:
          criterion:
            key: 'CrossEntropyLoss'
            kwargs:
              reduction: 'mean'
          criterion_wrapper:
            key: 'SimpleLossWrapper'
            kwargs:
              input:
                is_from_teacher: False
                module_path: '.'
                io: 'output'
              target:
                uses_label: True
          weight: 1.0
        bpp:
          criterion:
            key: 'BppLoss'
            kwargs:
              entropy_module_path: 'entropy_bottleneck'
              reduction: 'batchmean'
          weight: 1.0e-6

test:
  test_data_loader:
    dataset_id: *imagenet_val
    sampler:
      class_or_func: !import_get
        key: 'torch.utils.data.SequentialSampler'
      kwargs:
    kwargs:
      batch_size: 1
      num_workers: 16
      drop_last: False
