datasets:
  &imagenet_train ilsvrc2012/train: !import_call
    _name: &dataset_name 'ilsvrc2012'
    _root: &root_dir !join ['~/datasets/', *dataset_name]
    key: 'torchvision.datasets.ImageFolder'
    init:
      kwargs:
        root: !join [*root_dir, '/train']
        transform: !import_call
          key: 'torchvision.transforms.Compose'
          init:
            kwargs:
              transforms:
                - !import_call
                  key: 'torchvision.transforms.RandomResizedCrop'
                  init:
                    kwargs:
                      size: &input_size [224, 224]
                      interpolation:
                        !getattr
                        - !import_get
                          key: 'torchvision.transforms.functional.InterpolationMode'
                        - 'BICUBIC'
                - !import_call
                  key: 'torchvision.transforms.RandomHorizontalFlip'
                  init:
                    kwargs:
                      p: 0.5
                - !import_call
                  key: 'torchvision.transforms.ToTensor'
                  init:
                - !import_call
                  key: 'torchvision.transforms.Normalize'
                  init:
                    kwargs: &normalize_kwargs
                      mean: [0.5, 0.5, 0.5]
                      std: [0.5, 0.5, 0.5]
  &imagenet_val ilsvrc2012/val: !import_call
    key: 'torchvision.datasets.ImageFolder'
    init:
      kwargs:
        root: !join [*root_dir, '/val']
        transform: !import_call
          key: 'torchvision.transforms.Compose'
          init:
            kwargs:
              transforms:
                - !import_call
                  key: 'torchvision.transforms.Resize'
                  init:
                    kwargs:
                      size: 248
                      interpolation:
                        !getattr
                        - !import_get
                          key: 'torchvision.transforms.functional.InterpolationMode'
                        - 'BICUBIC'
                - !import_call
                  key: 'torchvision.transforms.CenterCrop'
                  init:
                    kwargs:
                      size: *input_size
                - !import_call
                  key: 'torchvision.transforms.ToTensor'
                  init:
                - !import_call
                  key: 'torchvision.transforms.Normalize'
                  init:
                    kwargs: *normalize_kwargs

models:
  teacher_model:
    name: &teacher_model_name 'vit_small_r26_s32_224'
    params:
      num_classes: 1000
      pretrained: True
    experiment: &teacher_experiment !join [*dataset_name, '-', *teacher_model_name]
    ckpt: !join ['./resource/ckpt/ilsvrc2012/teacher/', *teacher_experiment, '.pt']
  student_model:
    name: &student_model_name 'splittable_hybrid_vit'
    params:
      num_classes: 1000
      pretrained: True
      num_pruned_stages: 1
      bottleneck_config:
        name: 'MSHPBasedResNetBottleneck'
        params:
          num_bottleneck_channels: &bch 64
          num_latent_channels: 16
          g_a_channel_sizes: [3, *bch, *bch, *bch]
          g_s_channel_sizes: [*bch, 512, 256, 256]
      hybrid_vit_name: *teacher_model_name
      pre_transform_params:
      skips_head: False
      analysis_config:
        analyzes_after_compress: True
        analyzer_configs:
          - type: 'FileSizeAnalyzer'
            params:
              unit: 'KB'
    experiment: &student_experiment !join [*dataset_name, '-', *student_model_name, '_small_r26_s32_224-mshp-beta20.48_from_hybrid_vit_small_r26_s32_224']
    ckpt: !join ['./resource/ckpt/ilsvrc2012/supervised_compression/entropic_student/', *student_experiment, '.pt']

train:
  log_freq: 1000
  epoch_to_update: &epoch_to_update 10
  stage1:
    num_epochs: *epoch_to_update
    train_data_loader:
      dataset_id: *imagenet_train
      random_sample: True
      batch_size: 64
      num_workers: 16
      cache_output:
    val_data_loader:
      dataset_id: *imagenet_val
      random_sample: False
      batch_size: 32
      num_workers: 16
    teacher:
      sequential: ['patch_embed.backbone.stem', 'patch_embed.backbone.stages']
      frozen_modules: []
      forward_hook:
        input: []
        output: ['patch_embed.backbone.stages.0', 'patch_embed.backbone.stages.1', 'patch_embed.backbone.stages.2', 'patch_embed.backbone.stages.3']
      wrapper: 'DistributedDataParallel'
      requires_grad: False
    student:
      adaptations:
      sequential: ['bottleneck_layer', 'patch_embed_pruned_stages']
      frozen_modules: ['patch_embed_pruned_stages']
      forward_hook:
        input: []
        output: ['bottleneck_layer', 'patch_embed_pruned_stages.1', 'patch_embed_pruned_stages.2', 'patch_embed_pruned_stages.3', 'bottleneck_layer.entropy_bottleneck', 'bottleneck_layer.gaussian_conditional']
      wrapper: 'DistributedDataParallel'
      requires_grad: True
    optimizer:
      type: 'Adam'
      params:
        lr: 0.001
    scheduler:
      type: 'MultiStepLR'
      params:
        milestones: [5, 8]
        gamma: 0.1
    criterion:
      type: 'GeneralizedCustomLoss'
      org_term:
        factor: 0.0
      sub_terms:
        stages0:
          criterion:
            type: 'MSELoss'
            params:
              reduction: 'sum'
          params:
            input:
              is_from_teacher: False
              module_path: 'bottleneck_layer'
              io: 'output'
            target:
              is_from_teacher: True
              module_path: 'patch_embed.backbone.stages.0'
              io: 'output'
          factor: 1.0
        stages1:
          criterion:
            type: 'MSELoss'
            params:
              reduction: 'sum'
          params:
            input:
              is_from_teacher: False
              module_path: 'patch_embed_pruned_stages.1'
              io: 'output'
            target:
              is_from_teacher: True
              module_path: 'patch_embed.backbone.stages.1'
              io: 'output'
          factor: 1.0
        stages2:
          criterion:
            type: 'MSELoss'
            params:
              reduction: 'sum'
          params:
            input:
              is_from_teacher: False
              module_path: 'patch_embed_pruned_stages.2'
              io: 'output'
            target:
              is_from_teacher: True
              module_path: 'patch_embed.backbone.stages.2'
              io: 'output'
          factor: 1.0
        stages3:
          criterion:
            type: 'MSELoss'
            params:
              reduction: 'sum'
          params:
            input:
              is_from_teacher: False
              module_path: 'patch_embed_pruned_stages.3'
              io: 'output'
            target:
              is_from_teacher: True
              module_path: 'patch_embed.backbone.stages.3'
              io: 'output'
          factor: 1.0
        bpp_entropy:
          criterion:
            type: 'BppLoss'
            params:
              entropy_module_path: 'bottleneck_layer.entropy_bottleneck'
              reduction: 'sum'
          factor: 20.48
        bpp_gaussian:
          criterion:
            type: 'BppLoss'
            params:
              entropy_module_path: 'bottleneck_layer.gaussian_conditional'
              reduction: 'sum'
          factor: 20.48
  stage2:
    num_epochs: 20
    train_data_loader:
      dataset_id: *imagenet_train
      random_sample: True
      batch_size: 128
      num_workers: 16
      cache_output:
    val_data_loader:
      dataset_id: *imagenet_val
      random_sample: False
      batch_size: 32
      num_workers: 16
    teacher:
      sequential: []
      frozen_modules: []
      forward_hook:
        input: []
        output: []
      wrapper: 'DistributedDataParallel'
      requires_grad: False
    student:
      adaptations:
      sequential: []
      frozen_modules: ['bottleneck_layer.g_a', 'bottleneck_layer.h_a', 'bottleneck_layer.h_s', 'bottleneck_layer.entropy_bottleneck', 'bottleneck_layer.gaussian_conditional']
      forward_hook:
        input: []
        output: []
      wrapper: 'DistributedDataParallel'
      requires_grad: True
    optimizer:
      type: 'SGD'
      params:
        lr: 0.001
        momentum: 0.9
        weight_decay: 0.0005
    scheduler:
      type: 'MultiStepLR'
      params:
        milestones: [10]
        gamma: 0.1
    criterion:
      type: 'GeneralizedCustomLoss'
      org_term:
        criterion:
          type: 'KDLoss'
          params:
            temperature: 1.0
            alpha: 0.5
            reduction: 'batchmean'
        factor: 1.0
      sub_terms:

test:
  test_data_loader:
    dataset_id: *imagenet_val
    random_sample: False
    batch_size: 1
    num_workers: 16
