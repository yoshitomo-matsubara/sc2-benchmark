datasets:
  &imagenet_train ilsvrc2012/train: !import_call
    _name: &dataset_name 'ilsvrc2012'
    _root: &root_dir !join ['~/datasets/', *dataset_name]
    key: 'torchvision.datasets.ImageFolder'
    init:
      kwargs:
        root: !join [*root_dir, '/train']
        transform: !import_call
          key: 'torchvision.transforms.Compose'
          init:
            kwargs:
              transforms:
                - !import_call
                  key: 'torchvision.transforms.RandomResizedCrop'
                  init:
                    kwargs:
                      size: &input_size [224, 224]
                - !import_call
                  key: 'torchvision.transforms.RandomHorizontalFlip'
                  init:
                    kwargs:
                      p: 0.5
                - !import_call
                  key: 'torchvision.transforms.ToTensor'
                  init:
                - !import_call
                  key: 'torchvision.transforms.Normalize'
                  init:
                    kwargs: &normalize_kwargs
                      mean: [0.485, 0.456, 0.406]
                      std: [0.229, 0.224, 0.225]
  &imagenet_val ilsvrc2012/val: !import_call
    key: 'torchvision.datasets.ImageFolder'
    init:
      kwargs:
        root: !join [*root_dir, '/val']
        transform: !import_call
          key: 'torchvision.transforms.Compose'
          init:
            kwargs:
              transforms:
                - !import_call
                  key: 'torchvision.transforms.Resize'
                  init:
                    kwargs:
                      size: 256
                - !import_call
                  key: 'torchvision.transforms.CenterCrop'
                  init:
                    kwargs:
                      size: *input_size
                - !import_call
                  key: 'torchvision.transforms.ToTensor'
                  init:
                - !import_call
                  key: 'torchvision.transforms.Normalize'
                  init:
                    kwargs: *normalize_kwargs

models:
  teacher_model:
    name: &teacher_model_name 'resnet50'
    kwargs:
      num_classes: 1000
      pretrained: True
  student_model:
    name: &student_model_name 'splittable_resnet'
    kwargs:
      num_classes: 1000
      pretrained: True
      bottleneck_config:
        name: 'FPBasedResNetBottleneck'
        kwargs:
          num_bottleneck_channels: 24
          num_target_channels: 256
      resnet_name: *teacher_model_name
      pre_transform:
      skips_avgpool: False
      skips_fc: False
      analysis_config:
        analyzes_after_compress: True
        analyzer_configs:
          - key: 'FileSizeAnalyzer'
            kwargs:
              unit: 'KB'
    experiment: &student_experiment !join [*dataset_name, '-', *student_model_name, '50-fp-beta0.32_from_', *teacher_model_name]
    dst_ckpt: !join ['./resource/ckpt/ilsvrc2012/supervised_compression/entropic_student/', *student_experiment, '.pt']

train:
  log_freq: 1000
  epoch_to_update: &epoch_to_update 10
  stage1:
    num_epochs: *epoch_to_update
    train_data_loader:
      dataset_id: *imagenet_train
      random_sample: True
      batch_size: 64
      num_workers: 16
      cache_output:
    val_data_loader:
      dataset_id: *imagenet_val
      random_sample: False
      batch_size: 32
      num_workers: 16
    teacher:
      sequential: ['conv1', 'bn1', 'relu', 'maxpool', 'layer1', 'layer2', 'layer3', 'layer4']
      frozen_modules: []
      forward_hook:
        input: []
        output: ['layer1', 'layer2', 'layer3', 'layer4']
      wrapper: 'DistributedDataParallel'
      requires_grad: False
    student:
      adaptations:
      sequential: ['bottleneck_layer', 'layer2', 'layer3', 'layer4']
      frozen_modules: ['layer2', 'layer3', 'layer4']
      forward_hook:
        input: []
        output: ['bottleneck_layer', 'layer2', 'layer3', 'layer4', 'bottleneck_layer.entropy_bottleneck']
      wrapper: 'DistributedDataParallel'
      requires_grad: True
    optimizer:
      key: 'Adam'
      kwargs:
        lr: 0.001
    scheduler:
      key: 'MultiStepLR'
      kwargs:
        milestones: [5, 8]
        gamma: 0.1
    criterion:
      key: 'GeneralizedCustomLoss'
      org_term:
        factor: 0.0
      sub_terms:
        layer1:
          criterion:
            key: 'MSELoss'
            kwargs:
              reduction: 'sum'
          kwargs:
            input:
              is_from_teacher: False
              module_path: 'bottleneck_layer'
              io: 'output'
            target:
              is_from_teacher: True
              module_path: 'layer1'
              io: 'output'
          factor: 1.0
        layer2:
          criterion:
            key: 'MSELoss'
            kwargs:
              reduction: 'sum'
          kwargs:
            input:
              is_from_teacher: False
              module_path: 'layer2'
              io: 'output'
            target:
              is_from_teacher: True
              module_path: 'layer2'
              io: 'output'
          factor: 1.0
        layer3:
          criterion:
            key: 'MSELoss'
            kwargs:
              reduction: 'sum'
          kwargs:
            input:
              is_from_teacher: False
              module_path: 'layer3'
              io: 'output'
            target:
              is_from_teacher: True
              module_path: 'layer3'
              io: 'output'
          factor: 1.0
        layer4:
          criterion:
            key: 'MSELoss'
            kwargs:
              reduction: 'sum'
          kwargs:
            input:
              is_from_teacher: False
              module_path: 'layer4'
              io: 'output'
            target:
              is_from_teacher: True
              module_path: 'layer4'
              io: 'output'
          factor: 1.0
        bpp:
          criterion:
            key: 'BppLoss'
            kwargs:
              entropy_module_path: 'bottleneck_layer.entropy_bottleneck'
              reduction: 'sum'
          factor: 0.32
  stage2:
    num_epochs: 10
    train_data_loader:
      dataset_id: *imagenet_train
      random_sample: True
      batch_size: 128
      num_workers: 16
      cache_output:
    val_data_loader:
      dataset_id: *imagenet_val
      random_sample: False
      batch_size: 32
      num_workers: 16
    teacher:
      sequential: []
      frozen_modules: []
      forward_hook:
        input: []
        output: []
      wrapper: 'DistributedDataParallel'
      requires_grad: False
    student:
      adaptations:
      sequential: []
      frozen_modules: ['bottleneck_layer.encoder', 'bottleneck_layer.entropy_bottleneck']
      forward_hook:
        input: []
        output: []
      wrapper: 'DistributedDataParallel'
      requires_grad: True
    optimizer:
      key: 'SGD'
      kwargs:
        lr: 0.001
        momentum: 0.9
        weight_decay: 0.0005
    scheduler:
      key: 'MultiStepLR'
      kwargs:
        milestones: [5]
        gamma: 0.1
    criterion:
      key: 'GeneralizedCustomLoss'
      org_term:
        criterion:
          key: 'KDLoss'
          kwargs:
            temperature: 1.0
            alpha: 0.5
            reduction: 'batchmean'
        factor: 1.0
      sub_terms:

test:
  test_data_loader:
    dataset_id: *imagenet_val
    random_sample: False
    batch_size: 1
    num_workers: 16
