datasets:
  &pascal_train 'pascal_voc2012/train': !import_call
    _name: &dataset_name 'pascal_voc2012'
    _root: &root_dir '~/datasets'
    key: 'torchvision.datasets.VOCSegmentation'
    init:
      kwargs:
        root: *root_dir
        image_set: 'train'
        year: '2012'
        download: True
        transforms: !import_call
          key: 'custom.transform.CustomCompose'
          init:
            kwargs:
              transforms:
                - !import_call
                  key: 'custom.transform.CustomRandomResize'
                  init:
                    kwargs:
                      min_size: 256
                      max_size: 1026
                - !import_call
                  key: 'custom.transform.CustomRandomHorizontalFlip'
                  init:
                    kwargs:
                      p: 0.5
                - !import_call
                  key: 'custom.transform.CustomRandomCrop'
                  init:
                    kwargs:
                      size: 513
                - !import_call
                  key: 'custom.transform.CustomToTensor'
                  init:
                - !import_call
                  key: 'custom.transform.CustomNormalize'
                  init:
                    kwargs: &normalize_kwargs
                      mean: [0.485, 0.456, 0.406]
                      std: [0.229, 0.224, 0.225]
  &pascal_val 'pascal_voc2012/val': !import_call
    key: 'torchvision.datasets.VOCSegmentation'
    init:
      kwargs:
        root: *root_dir
        image_set: 'val'
        year: '2012'
        download: True
        transforms: !import_call
          key: 'custom.transform.CustomCompose'
          init:
            kwargs:
              transforms:
                - !import_call
                  key: 'custom.transform.CustomRandomResize'
                  init:
                    kwargs:
                      min_size: 513
                      max_size: 513
                - !import_call
                  key: 'custom.transform.CustomToTensor'
                  init:
                    kwargs:
                      converts_sample: True
                      converts_target: True
                - !import_call
                  key: 'custom.transform.CustomNormalize'
                  init:
                    kwargs: *normalize_kwargs

models:
  teacher_model:
    key: &teacher_model_name 'deeplabv3_resnet50'
    kwargs:
      pretrained: True
      pretrained_backbone: True
      num_classes: 21
      aux_loss: True
    src_ckpt: 'https://github.com/yoshitomo-matsubara/torchdistill/releases/download/v0.2.8/pascal_voc2012-deeplabv3_resnet50.pt'
  student_model:
    key: 'deeplabv3_model'
    kwargs:
      pretrained: True
      pretrained_backbone_name: 'resnet50'
      num_classes: 21
      uses_aux: True
      num_input_channels: 2048
      num_aux_channels: 1024
      return_layer_dict:
        layer3: 'aux'
        layer4: 'out'
      analysis_config:
        analyzes_after_compress: True
        analyzer_configs:
          - key: 'FileSizeAnalyzer'
            kwargs:
              unit: 'KB'
      analyzable_layer_key: 'bottleneck_layer'
      backbone_config:
        key: 'splittable_resnet'
        kwargs:
          num_classes: 1000
          pretrained: True
          replace_stride_with_dilation: [False, True, True]
          bottleneck_config:
            key: 'FPBasedResNetBottleneck'
            kwargs:
              num_bottleneck_channels: 24
              num_target_channels: 256
          resnet_name: 'resnet50'
          pre_transform:
          skips_avgpool: True
          skips_fc: True
        src_ckpt: './resource/ckpt/ilsvrc2012/supervised_compression/entropic_student/ilsvrc2012-splittable_resnet50-fp-beta0.32_from_resnet50.pt'
      start_ckpt_file_path: 'https://github.com/yoshitomo-matsubara/torchdistill/releases/download/v0.2.8/pascal_voc2012-deeplabv3_resnet50.pt'
    experiment: &student_experiment !join [*dataset_name, '-deeplabv3_splittable_resnet50-fp-beta0.32_from_', *teacher_model_name]
    dst_ckpt: !join ['./resource/ckpt/pascal_voc2012/supervised_compression/entropic_student/', *student_experiment, '.pt']

train:
  log_freq: 1000
  epoch_to_update: 0
  stage1:
    num_epochs: 40
    train_data_loader:
      dataset_id: *pascal_train
      sampler:
        class_or_func: !import_get
          key: 'torch.utils.data.RandomSampler'
        kwargs:
      batch_size: 16
      num_workers: 16
      collate_fn: 'pascal_seg_collate_fn'
      cache_output:
    val_data_loader:
      dataset_id: *pascal_val
      sampler:
        class_or_func: !import_get
          key: 'torch.utils.data.SequentialSampler'
        kwargs:
      batch_size: 1
      num_workers: 16
      collate_fn: 'pascal_seg_eval_collate_fn'
    teacher:
      adaptations:
      sequential: ['backbone']
      forward_hook:
        input: []
        output: ['backbone.layer2', 'backbone.layer3', 'backbone.layer4']
      wrapper: 'DistributedDataParallel'
      requires_grad: False
    student:
      adaptations:
      sequential: ['backbone']
      frozen_modules: ['backbone.bottleneck_layer.encoder', 'backbone.bottleneck_layer.entropy_bottleneck', 'backbone.layer3', 'backbone.layer4']
      forward_hook:
        input: []
        output: ['backbone.layer2', 'backbone.layer3', 'backbone.layer4']
      wrapper: 'DistributedDataParallel'
      requires_grad: True
    optimizer:
      key: 'Adam'
      kwargs:
        lr: 0.001
    scheduler:
      key: 'MultiStepLR'
      kwargs:
        milestones: [30, 35]
        gamma: 0.1
    criterion:
      key: 'GeneralizedCustomLoss'
      org_term:
        weight: 0.0
      sub_terms:
        layer2:
          criterion:
            key: 'MSELoss'
            kwargs:
              reduction: 'sum'
          kwargs:
            input:
              is_from_teacher: False
              module_path: 'backbone.layer2'
              io: 'output'
            target:
              is_from_teacher: True
              module_path: 'backbone.layer2'
              io: 'output'
          weight: 1.0
        layer3:
          criterion:
            key: 'MSELoss'
            kwargs:
              reduction: 'sum'
          kwargs:
            input:
              is_from_teacher: False
              module_path: 'backbone.layer3'
              io: 'output'
            target:
              is_from_teacher: True
              module_path: 'backbone.layer3'
              io: 'output'
          weight: 1.0
        layer4:
          criterion:
            key: 'MSELoss'
            kwargs:
              reduction: 'sum'
          kwargs:
            input:
              is_from_teacher: False
              module_path: 'backbone.layer4'
              io: 'output'
            target:
              is_from_teacher: True
              module_path: 'backbone.layer4'
              io: 'output'
          weight: 1.0
  stage2:
    num_epochs: &num_epochs 10
    train_data_loader:
      dataset_id: *pascal_train
      sampler:
        class_or_func: !import_get
          key: 'torch.utils.data.RandomSampler'
        kwargs:
      batch_size: 16
      num_workers: 16
      collate_fn: 'pascal_seg_collate_fn'
      cache_output:
    teacher:
      adaptations:
      sequential: []
      special:
        key: 'EmptyModule'
        kwargs:
      forward_hook:
        input: []
        output: []
      wrapper:
      requires_grad: False
    student:
      adaptations:
      sequential: []
      frozen_modules: ['backbone.bottleneck_layer.encoder', 'backbone.bottleneck_layer.entropy_bottleneck']
      forward_hook:
        input: []
        output: []
      wrapper: 'DistributedDataParallel'
      requires_grad: True
    optimizer:
      key: 'SGD'
      kwargs:
        lr: 0.0025
        momentum: 0.9
        weight_decay: 0.0001
      module_wise_kwargs:
        - module: 'backbone'
          kwargs: {}
        - module: 'classifier'
          kwargs: {}
        - module: 'aux_classifier'
          kwargs:
            lr: 0.025
    scheduler:
      key: 'poly_lr_scheduler'
      kwargs:
        num_iterations: None
        num_epochs: *num_epochs
        power: 0.9
      scheduling_step: 1
    criterion:
      key: 'GeneralizedCustomLoss'
      func2extract_org_loss: 'extract_simple_org_loss_dict'
      org_term:
        criterion:
          key: 'CrossEntropyLoss'
          kwargs:
            reduction: 'mean'
            ignore_index: 255
        weight:
          out: 1.0
          aux: 0.5
      sub_terms:

test:
  test_data_loader:
    dataset_id: *pascal_val
    sampler:
      class_or_func: !import_get
        key: 'torch.utils.data.SequentialSampler'
      kwargs:
    collate_fn: 'pascal_seg_eval_collate_fn'
    kwargs:
      batch_size: 1
      num_workers: 16
